{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/chatbot/chatbot.component.ts","webpack:///src/app/chatbot/chatbot.component.html","webpack:///src/app/up-pdf/up-pdf.component.ts","webpack:///src/app/up-pdf/up-pdf.component.html","webpack:///src/app/upload.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","flagComponent","componentToDisplay","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ChatbotComponent","uploadService","http","question","SERVER_URL","messages","addBotMessage","scrollContainer","scrollFrame","nativeElement","messageElements","changes","subscribe","_","onMessagesChanged","scrollToBottom","scroll","top","scrollHeight","left","behavior","addUserMessage","formData","FormData","append","askQuestion","res","data","answer","push","text","sender","reply","date","Date","handleUserMessage","UpPdfComponent","fileData","uploadedFilePath","fileName","fileInput","target","files","name","alert","length","substr","upload","pipe","event","console","log","type","UploadProgress","Response","error","body","status","fileProgress","onSubmit","UploadService","httpClient","post","reportProgress","observe","providedIn","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'PDF-chatbot';\n  flagComponent = \"UploadPDF\";\n  componentToDisplay = \"Have any Questions? Ask the chatbot!\";\n\n  toggleComponent(){\n    if(this.flagComponent=='UploadPDF'){\n      this.flagComponent='ChatBot';\n    }\n  }\n\n}\n","<app-up-pdf *ngIf=\"flagComponent=='UploadPDF'\"></app-up-pdf>\n\n<app-chatbot *ngIf=\"flagComponent=='ChatBot'\"></app-chatbot>\n<div *ngIf=\"flagComponent=='UploadPDF'\" class=\"askPDFButton\">\n  <button (click)=\"toggleComponent()\">{{componentToDisplay}}</button>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms'\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { UpPdfComponent } from './up-pdf/up-pdf.component';\nimport { ChatbotComponent } from './chatbot/chatbot.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UpPdfComponent,\n    ChatbotComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';\nimport { AfterViewInit, ViewChild, ViewChildren, ElementRef,   QueryList, HostListener} from '@angular/core';\nimport { UploadService } from '../upload.service'\n\n/*\n  This component provides the functions\n   to add messages by both bot and user\n*/\n\n@Component({\n  selector: 'app-chatbot',\n  templateUrl: './chatbot.component.html',\n  styleUrls: ['./chatbot.component.css']\n})\nexport class ChatbotComponent implements OnInit {\n\n  question = \"\";\n  SERVER_URL = \"http://127.0.0.1:5000/\";\n\n  @ViewChild('scrollframe', {static: false}) scrollFrame: ElementRef;\n  @ViewChildren('msg') messageElements: QueryList<any>;\n\n  private messageContainer: any;\n  private scrollContainer: any;\n  messages = [];\n\n  constructor(private uploadService: UploadService, private http: HttpClient){ }\n\n  ngOnInit(): void {\n    this.addBotMessage('How can I help you?');\n  }\n\n  ngAfterViewInit() {\n    this.scrollContainer = this.scrollFrame.nativeElement;\n    this.messageElements.changes.subscribe(_ => this.onMessagesChanged());\n  }\n  //whenever msg added scroll to the bottom of the chat-panel\n  private onMessagesChanged() {\n    this.scrollToBottom();\n  }\n\n  private scrollToBottom() {\n    this.scrollContainer.scroll({\n      top: this.scrollContainer.scrollHeight,\n      left: 0,\n      behavior: 'smooth'\n    });\n  }\n\n  //when user enters the question or clicks the send button\n  handleUserMessage(){\n    if(this.question==\"\"){\n      return;\n    }\n    this.addUserMessage();\n    const formData = new FormData();\n    formData.append('text', this.question);\n    this.uploadService.askQuestion(formData)\n                       .subscribe(res => {\n                          this.addBotMessage(res.data.answer);\n                       });\n    this.question = \"\";\n  }\n\n  //adding the msg to the msg array\n\n  addUserMessage() {\n    this.messages.push({\n      text: this.question,\n      sender: 'You',\n      reply: false,\n      date: new Date()\n    });\n  }\n\n  addBotMessage(text) {\n    this.messages.push({\n      text: text,\n      sender: 'Bot',\n      reply: true,\n      date: new Date()\n    });\n  }\n\n}\n","<div class=\"chatbot-container\"  >\n    <div class=\"chatbot-title\">\n          <h3 class=\"panel-title\">ChatBot</h3>\n      </div>\n    <div class=\"scrollbar_try\" #scrollframe>\n\n        <div class=\"panel-body msg_container_base\" *ngFor=\"let msg of messages\" #msg>\n          <div class=\"row msg_container base_sent\" *ngIf=\"!msg.reply\">\n            <div class=\"col-md-10 col-xs-10\">\n              <div class=\"messages msg_sent\">\n                <p>{{msg.text}}</p>\n                <time datetime=\"2009-11-13T20:00\">• {{msg.date | date:'shortTime' }}</time>\n              </div>\n            </div>\n\n          </div>\n          <div class=\"row msg_container base_receive\" *ngIf=\"msg.reply\">\n\n            <div class=\"col-md-10 col-xs-10\">\n              <div class=\"messages msg_receive\">\n                <p>{{msg.text }}</p>\n                <time datetime=\"2009-11-13T20:00\">• {{msg.date | date:'shortTime' }}</time>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <div class=\"text-send\">\n      <input type=\"text\" placeholder=\"Write your message here...\" [(ngModel)]=\"question\" (keyup.enter)=\"handleUserMessage()\" />\n      <button  (click)=\"handleUserMessage()\">Send</button>\n    </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpErrorResponse } from '@angular/common/http';\nimport { UploadService } from '../upload.service'\nimport { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n/*\n  This component provides the functions to upload pdf\n*/\n\n@Component({\n  selector: 'app-up-pdf',\n  templateUrl: './up-pdf.component.html',\n  styleUrls: ['./up-pdf.component.css']\n})\nexport class UpPdfComponent implements OnInit {\n  fileData: File = null;\n  uploadedFilePath: string = null;\n  fileName = \"\";\n  constructor(private uploadService: UploadService) { }\n\n  // get input file\n  fileProgress(fileInput: any) {\n      this.fileData = <File>fileInput.target.files[0];\n      this.fileName = this.fileData.name;\n  }\n\n  //when submit button clicked call the upload service\n  onSubmit() {\n      if(this.fileData==null){\n        alert(\"select a file\");\n        return;\n      }\n      if(this.fileData.name.length >4 && this.fileData.name.substr(-4,4)!='.pdf'){\n        alert(\"upload only pdf\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append('pdf', this.fileData);\n\n      this.uploadService.upload(formData).pipe(\n      map(event => {\n        console.log(\"event\");\n        console.log(event);\n        switch (event.type) {\n          case HttpEventType.UploadProgress:\n            //file.progress = Math.round(event.loaded * 100 / event.total);\n            break;\n          case HttpEventType.Response:\n            return event;\n        }\n      }),\n      catchError((error: HttpErrorResponse) => {\n        console.log(error)\n        return of(`${this.fileData.name} upload failed.`);\n      })).subscribe((event: any) => {\n        if (typeof (event) === 'object') {\n          if(event.body.data.status==\"uploaded\")\n            alert(\"File Uploaded Successfully!\");\n          console.log(event.body);\n        }\n        this.fileName=\"\";\n      });\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"FileUpload\">\n  <div class=\"wrapper\">\n      <div class=\"upload\">\n        <p> <span class=\"upload__button\" >Upload Files<input type=\"file\" class=\"input__button\" (change)=\"fileProgress($event)\" accept=\"application/pdf\" /></span></p>\n      </div>\n      <div class=\"form-group\">\n        <div><span>{{fileName}}</span></div>\n        <button class=\"btn btn-primary\" (click)=\"onSubmit()\">Submit</button>\n      </div>\n  </div>\n</div>\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpErrorResponse, HttpEventType } from  '@angular/common/http';\nimport { map } from  'rxjs/operators';\n\n/*\n  This service is used to call the api\n  for uploading pdf and\n  sending the question asked to the bot\n*/\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n\n\tconstructor(private httpClient: HttpClient) { }\n\n  public upload(formData) {\n\n    return this.httpClient.post<any>('/handleUpload', formData, {\n        reportProgress: true,\n        observe: 'events'\n      });\n  }\n\n  public askQuestion(formData) {\n    console.log(\"askQuestion\");\n    return this.httpClient.post<any>('/questions', formData, {\n      });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}